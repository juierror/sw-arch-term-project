DB

User
{
	Username: String,
	Password: String,
	Score: Int,
}

Leaderboard
{
	table: [
		{
			username: String,
			score: Int,
		}
	]
}

Problem
{
	problemId: String,
	question: String,
	solution: String,
}

============================

API

Problem Service
GET /problem
- response -> one random problem
GET /checkResult
- params -> problemId, answer
- response -> a boolean indicating the correctness

User Service
POST /register
- params -> username, password
- response -> user entity
POST /login
- params -> username, password
- response -> user entity
* error if user doesn't exist

Leaderboard Service
POST /updateScore
- params -> username, score
* call /updateScore API at db service
GET /leaderboard
- response -> leaderboard entity
* call /leaderboard API at db and send the response back to client

Database Service
POST /createUser
- params -> username, password
- response -> user entity
* create new user and send back the new user entity
* error if the username has been taken
POST /login
- params -> username, password
- response -> user entity
* error if user doesn't exist
POST /updateScore
- params -> username, score
* update both user entity and leaderboard entity
GET /leaderboard
- response -> leaderboard entity
GET /problems
- response -> all problem entities